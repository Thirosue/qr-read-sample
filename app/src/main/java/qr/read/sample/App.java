/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package qr.read.sample;

import com.google.zxing.*;
import com.google.zxing.client.j2se.BufferedImageLuminanceSource;
import com.google.zxing.common.BitMatrix;
import com.google.zxing.common.DetectorResult;
import com.google.zxing.common.HybridBinarizer;
import com.google.zxing.oned.EAN13Reader;
import com.google.zxing.qrcode.QRCodeReader;
import com.google.zxing.qrcode.detector.Detector;
import com.google.zxing.qrcode.encoder.QRCode;

import javax.imageio.ImageIO;
import java.awt.image.BufferedImage;
import java.io.File;
import java.nio.file.*;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;

import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.rendering.ImageType;
import org.apache.pdfbox.rendering.PDFRenderer;
import org.apache.pdfbox.tools.imageio.ImageIOUtil;

public class App {
    public static void main(String[] args) {
        String input = "input4.pdf";
        String tmp = "pdf.jpg";

        try {
            Path path = Paths.get(tmp);
            try (InputStream in = new FileInputStream(input);
                    OutputStream out = Files.newOutputStream(path);) {
                rasterize(in, out);
            }

            //画像データを読み込む
            BufferedImage image = ImageIO.read(new File(tmp));
            LuminanceSource source = new BufferedImageLuminanceSource(image);
            Binarizer binarizer = new HybridBinarizer(source);
            BinaryBitmap bitmap = new BinaryBitmap(binarizer);

            QRCodeReader reader = new QRCodeReader();

            //QRCodeReader#decode()には以下の情報を渡す
            // (1)読み込んだイメージ
            Result result = reader.decode(bitmap);

            System.out.println("----------------  read results");
            System.out.println(result.getText());

        } catch (NotFoundException e) {
            System.err.println("[" + input + "] イメージの中にバーコードが見つからないためデコードで例外が発生.");
            e.printStackTrace();
        } catch (ChecksumException e) {
            System.err.println("[" + input + "] バーコードが見つかったがチェックサム検査で例外が発生.");
            e.printStackTrace();
        } catch (FormatException e) {
            System.err.println("[" + input + "] は書式不正のためデコードで例外が発生.");
            e.printStackTrace();
        } catch (IOException e) {
            System.err.println("[" + input + "] を読み込むときに例外が発生.");
            e.printStackTrace();
        }
    }

    public static void rasterize(InputStream in, OutputStream out) throws IOException {
        try (PDDocument doc = PDDocument.load(in)) {

            PDFRenderer pdfRenderer = new PDFRenderer(doc);

            BufferedImage bim = pdfRenderer.renderImageWithDPI(0/*1ページ目を対象にする*/, 300, ImageType.RGB);

            ImageIO.write(bim, "JPEG", out);
        }
    }
}